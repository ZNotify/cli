name: Build CLI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_binary_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - mipsel-unknown-linux-gnu
          - mips64-unknown-linux-gnuabi64

    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.setup.outputs.cachekey }}-cargo-key

      - name: Env init
        run: |
          cargo install cargo-deb
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get install musl-tools
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools
            sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-musl-gcc
          elif [ "${{ matrix.target }}" = "mipsel-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-mipsel-linux-gnu
          elif [ "${{ matrix.target }}" = "mips64-unknown-linux-gnuabi64" ]; then
            sudo apt-get install -y gcc-mips64-linux-gnuabi64
          fi

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}
          if [[ "${{ matrix.target }}" != *"musl"* ]]; then
              cargo deb --target ${{ matrix.target }}
          fi

      - name: Rename binary
        run: |
          mv target/${{ matrix.target }}/release/znotify target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
            name: ${{ matrix.target }}
            path: |
              target/${{ matrix.target }}/release/znotify-${{ matrix.target }}
              target/${{ matrix.target }}/debian/*.deb

  build_binary_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.setup.outputs.cachekey }}-cargo-key

      - name: Env init
        run: |
          rustup target add ${{ matrix.target }}
          brew install openssl

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          mv target/${{ matrix.target }}/release/znotify target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

  build_binary_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.setup.outputs.cachekey }}-cargo-key

      - name: Env init
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          mv target/${{ matrix.target }}/release/znotify.exe target/${{ matrix.target }}/release/znotify-${{ matrix.target }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/znotify-${{ matrix.target }}.exe

  release:
    if: github.event_name == 'push'
    needs: [build_binary_linux, build_binary_macos, build_binary_windows]
    runs-on: ubuntu-latest
    steps:
      - name: Get all artifacts
        uses: actions/download-artifact@v3
        with:
          path: binary

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            binary/*/*
            binary/*/*/*