name: Build CLI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ released ]

jobs:
  build_binary_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu


    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
        with:
          shared-key: ${{ runner.os }}-cargo-${{ steps.setup.outputs.cachekey }}

      - name: Env init
        run: |
          cargo install cargo-deb
          sudo apt-get -qq update
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -qq -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "mipsel-unknown-linux-gnu" ]; then
            sudo apt-get install -qq -y gcc-mipsel-linux-gnu
          elif [ "${{ matrix.target }}" = "mips64-unknown-linux-gnuabi64" ]; then
            sudo apt-get install -qq -y gcc-mips64-linux-gnuabi64
          fi

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}
          cargo deb --target ${{ matrix.target }}


      - name: Rename binary
        shell: bash
        run: |
          mv -f target/${{ matrix.target }}/release/znotify target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/znotify-${{ matrix.target }}
            target/${{ matrix.target }}/debian/*.deb

  build_binary_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
        with:
          shared-key: ${{ runner.os }}-cargo-${{ steps.setup.outputs.cachekey }}

      - name: Env init
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}

      - name: Rename binary
        shell: bash
        run: |
          mv -f target/${{ matrix.target }}/release/znotify target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/znotify-${{ matrix.target }}

  build_binary_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - name: Rust Setup
        id: setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
        with:
          shared-key: ${{ runner.os }}-cargo-${{ steps.setup.outputs.cachekey }}

      - name: Env init
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build binary
        run: |
          cargo build --release --bins --target ${{ matrix.target }}

      - name: Rename binary
        shell: bash
        run: |
          mv -f target/${{ matrix.target }}/release/znotify.exe target/${{ matrix.target }}/release/znotify-${{ matrix.target }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/znotify-${{ matrix.target }}.exe

  release_nightly:
    if: github.event_name == 'push'
    needs: [ build_binary_linux, build_binary_macos, build_binary_windows ]
    runs-on: ubuntu-latest
    steps:
      - name: Get all artifacts
        uses: actions/download-artifact@v3
        with:
          path: binary

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            binary/*/*
            binary/*/*/*

  release_stable:
    if: github.event_name == 'release'
    needs: [ build_binary_linux, build_binary_macos, build_binary_windows ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'master'

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Get all artifacts
        uses: actions/download-artifact@v3
        with:
          path: binary

      - name: Check version
        run: python scripts/version.py

      - name: Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ github.event.release.tag_name }}"
          title: "${{ github.event.release.tag_name }}"
          prerelease: false
          files: |
            binary/*/*
            binary/*/*/*

      - name: Generate winget manifest
        run: |
          python scripts/winget.py
